import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'java-library'
}

group 'com.gamedash'
version '1.0-SNAPSHOT'

sourceCompatibility = 8

repositories {
    mavenCentral()
}

test {

    useJUnitPlatform()

}

dependencies {

    implementation('com.google.code.gson:gson:2.8.5')
    implementation('org.apache.httpcomponents:httpclient:4.5.8')
    implementation('org.slf4j:slf4j-simple:1.7.28')
    implementation('org.apache.commons:commons-lang3:3.9')
    implementation files('lib/Schokker-IT-Rest-Client.jar')
    testCompile('org.junit.jupiter:junit-jupiter-api:5.4.2')
    testCompile('org.junit.jupiter:junit-jupiter-engine:5.4.2')

}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
